<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="Content-Type" const="text/html;charset=UTF-8" />
    <link href="https://fonts.googleapis.com/css?family=Comfortaa" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="./css/stylechat.css">
    <script src="https://cdn.socket.io/4.4.1/socket.io.min.js" integrity="sha384-fKnu0iswBIqkjxrhQCTZ7qlLHOFEgNkRmK2vaO/LbTZSXdJfAu6ewRBdwHPhBo/H" crossorigin="anonymous"></script>
    <title>ElisPlay Chat</title>
</head>

<body>
    <header>
        <h1>ElisPlay Chat</h1>
    </header>

    <section>
        <div id="change_username">
            <button style="display: none" onclick="changeusername()" id="send_username" type="button">Change
                username</button>
        </div>
    </section>

    <section id="chatroom">
    </section>
    <section id="feedback"></section>



    <section id="input_zone">
        <input id="message" class="vertical-align" type="text" />
        <button onclick="emitmsg()" id="send_message" class="vertical-align" type="button">Send</button>
    </section>

    <script src="https://code.jquery.com/jquery-latest.min.js"></script>
    <script>
        var message = $("#message");
        var chatroom = $("#chatroom")
        var feedback = $("#feedback")

        var username = "Anonymous"
        console.log(document.location.origin)

        fetch(`${document.location.origin}/username`, {
                method: "GET",
            })
            .then((response) => response.json())
            .then((result) => {
                console.log(JSON.parse(result).user)
                username = JSON.parse(result).user
            })
            .catch((error) => {
                console.error(error);
            });


        const socket = io({
            auth: (cb) => {
                cb(localStorage.getItem("token"));
            }
        });

        socket.on("connect_error", () => {
            setTimeout(() => {
                socket.connect();
            }, 1000);
        });

        // client-side
        socket.on("connect", () => {
            const engine = socket.io.engine;

            engine.on("upgrade", () => {
                const upgradedTransport = socket.io.engine.transport.name; // in most cases, "websocket"
                console.log(upgradedTransport)
                socket.emit("nvplayerserv", socket.id, username)
            });
        });


        // receive a message from the server
        socket.on("nvplayer", (arg, username) => {
            if (socket.id != arg) {
                chatroom.append(`<p class='message'>Dite tous bonjour à ${username}</p>`)
            }
        });

        // receive a message from the server
        socket.on("helloserv", (username, msg) => {
            chatroom.append(`<p class='message'>${username} : ${msg}</p>`)
            feedback.html('');
        });

        let spamhahalol = 0;
        let timeout;

        function timer(time) {
            timeout = setTimeout(remettreazero, time);
        }

        function myStopFunction() {
            clearTimeout(timeout);
        }

        function remettreazero() {
            if (spamhahalol > 4) {
                alert("Vous pouvez maintenant récrire")
            }
            enableBtn("send_message")
            spamhahalol = 0;
        }

        function emitmsg() {
            clearTimeout(timeout);
            timer(10000)
            spamhahalol++
            console.log(spamhahalol)
            if (message.val() != "" && spamhahalol <= 4) {
                if (socket.connected) {
                    socket.emit("msg", username, message.val());
                    feedback.html('');
                    message.val('');
                } else {
                    socket.connect();
                }
            } else if (spamhahalol > 4) {
                disableBtn("send_message")
                alert("Trop de spam veuillez patientez")
                myStopFunction()
                timer(5000)
            } else {
                disableBtn("send_message")
            }

        }

        //Emit typing
        message.bind("keypress", () => {
            socket.emit('typingserv', socket.id, username)

        })


        //Listen on typing
        socket.on('typing', (data, username) => {
            if (socket.id != data) {
                feedback.html(`<p><i>${username} écrit un message... </i></p>`)
            }
        })

        function disableBtn(idbtn) {
            document.getElementById(idbtn).disabled = true;
        }

        function enableBtn(idbtn) {
            document.getElementById(idbtn).disabled = false;
        }
    </script>
</body>

</html>